#!/usr/bin/python

# -------------------------------------------------------------------
# Copyright (c) 2010-2018 Denis Machard
# This file is part of the extensive testing project
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301 USA
# -------------------------------------------------------------------

from optparse import OptionParser
import Core.AutomationServer as Core
import Core.CliFunctions as Cli
import sys
import platform

# checking python version before to start the server
if sys.version_info.major == 2:
    if sys.version_info.minor <= 5:
        print("Python %s not supported" % platform.python_version() )
        sys.exit(2)
elif sys.version_info.major == 3:
    if sys.version_info.minor < 5:
        print("Python %s not supported" % platform.python_version() )
        sys.exit(2)
else:
    print("Python %s not supported" % platform.python_version() )
    sys.exit(2)

# prepare the command line with all options	
parser = OptionParser()
parser.set_usage("./run [start|stop|restart|reload|generate|deploy|run|version]")

parser.add_option('--start', dest='start', default=False, 
                    action='store_true', 
                    help="Start the server.")
parser.add_option('--stop', dest='stop', default=False, 
                    action='store_true', 
                    help="Stop the server.")
parser.add_option('--status', dest='status', default=False, 
                    action='store_true', 
                    help='Show the current status of the server.')
parser.add_option('--reload', dest='reload', default=False, 
                    action='store_true', 
                    help='Reload the configuration of the server.')
parser.add_option('--generate', dest='generate', default=False, 
                    action='store_true', 
                    help='Generate all tar.gz packages (adapters, libraries and samples).')
parser.add_option('--deploy', dest='deploy', default=False, 
                    action='store_true', 
                    help='Deploy all clients, agents and probes.')
parser.add_option('--run', dest='run', default=False, 
                    action='store_true', 
                    help='Run one test or more (Common:/Samples/Tests_Unit/01_Initial_test.tux)' )
parser.add_option('--version', dest='version', default=False, 
                    action='store_true', 
                    help='Show the version.')

(options, args) = parser.parse_args()

if __name__ == "__main__":
	Core.initialize()
	if len(args) > 1: 
		if args[0] in [ 'run' ]:
			if not len(args[2:]):
				parser.print_help()
				sys.exit(2)
			for arg in args[2:]:
				if ":" not in arg:
					parser.print_help()
					sys.exit(2)
			Cli.instance().runTest(args[1:])
		else:
		    parser.print_help()
		    sys.exit(2)
	elif len(args) == 1: 
		if args[0] in [ 'start'] or options.start == True :
		    Core.start()
		elif args[0] in [ 'stop' ] or options.stop == True:
		    Core.stop()
		elif args[0] in [ 'version']:
		    Cli.instance().version()
		elif args[0] in [ 'status']:
		    Core.status()
		elif args[0] in [ 'reload']:
		    Cli.instance().reload()
		elif args[0] in [ 'generate']:
		    Cli.instance().generate()
		elif args[0] in [ 'deploy' ]:
		    Core.deploy()
		else:
		    parser.print_help()
		    sys.exit(2)
		sys.exit(0)
	elif len(args) == 0:
		if options.start == True :
		    Core.start()
		elif options.stop == True:
		    Core.stop()
		elif options.version == True:
		    Cli.instance().version()
		elif options.status == True:
		    Core.status()
		elif options.reload == True:
		    Cli.instance().reload()
		elif options.generate == True:
		    Cli.instance().generate()
		elif options.deploy == True:
		    Core.deploy()
		else:
		    parser.print_help()
		    sys.exit(2)
		sys.exit(0)
	else:
		parser.print_help()
		sys.exit(0)
